forbidden.groups<- rep(list(NA),length(forb.genera))
treelist<- data.frame("taxon"=tree$tip.label, "genus"=word(tree$tip.label, 1, sep="_"))
forbidden.groups
treelist<- data.frame("taxon"=tree$tip.label, "genus"=word(tree$tip.label, 1, sep="_"))
if(length(forbidden.groups)>0){
for(l in 1:length(forb.genera)){
forbidden.groups[[l]]<- treelist[treelist$genus==forb.genera[l], "taxon"]
}}
forbidden.groups
bind(forbidden.groups, genus_tree_list)
paste(forbidden.groups, genus_tree_list)
c(forbidden.groups, genus_tree_list)
poly.genera<- species.table[species.table$genus.type=="POLYPHYLETIC",]
poly.genera
poly.genera<-poly.genera[!duplicated(species.table$genus),]
poly.genera<-poly.genera$genus[!duplicated(species.table$genus)]
poly.genera
poly.genera<- species.table[species.table$genus.type=="POLYPHYLETIC",]
poly.genera<-poly.genera$genus[!duplicated(species.table$genus)]
poly.genera
poly.genera<- species.table[species.table$genus.type=="POLYPHYLETIC",]
View(poly.genera)
poly.genera<-poly.genera$genus[!duplicated(poly.genera$genus)]
poly.genera
#forbidden.groups
forb.genera<- species.table[species.table$genus.type=="MONOPHYLETIC"|species.table$genus.type=="PARAPHYLETIC","genus"]
forb.genera<-forb.genera[!duplicated(forb.genera)]
forbidden.groups<- rep(list(NA),length(forb.genera))
treelist<- data.frame("taxon"=tree$tip.label, "genus"=word(tree$tip.label, 1, sep="_"))
if(length(forbidden.groups)>0){
for(l in 1:length(forb.genera)){
forbidden.groups[[l]]<- treelist[treelist$genus==forb.genera[l], "taxon"]
}}
forbidden.groups
poly.genera<- species.table[species.table$genus.type=="POLYPHYLETIC",]
poly.genera<-poly.genera$genus[!duplicated(poly.genera$genus)]
for(p in 1:length(poly.genera)){
genus<- poly.genera[p]
tree_taxa <- (newtree$tip.label)
genus_tree_taxa <- tree_taxa[word(tree_taxa, 1, sep="_")==genus]
genus_tree_list<- rep(list(NA), times=length(genus_tree_taxa))
for(i in 1:length(genus_tree_taxa)){
sp<-genus_tree_taxa[i]
if(i>1 & sp%in% unlist(genus_tree_list)){next}
sp.tip<- which(newtree$tip.label==sp) #tip value
parent<-newtree$edge[newtree$edge[,2]==sp.tip,1] #direct ancestor
siblings<- newtree$tip.label[getDescendants(newtree, parent)][!is.na(newtree$tip.label[getDescendants(newtree, parent)])] #ancestor's descendants
if(length(siblings[word(siblings, 1, sep="_")!=genus])==1){
siblings<-siblings[word(siblings, 1, sep="_")==genus]
} #if intruders exist
if(length(siblings[word(siblings, 1, sep="_")!=genus])> 1){
intruders<-siblings[word(siblings, 1, sep="_")!=genus]
intr.desc.tips<-getDescendants(newtree, getMRCA(newtree, intruders))
intr.desc.names<-newtree$tip.label[intr.desc.tips]
intr.desc.names<-intr.desc.names[!is.na(intr.desc.names)]
if(all(word(intr.desc.names, 1, sep="_")!=genus)){
siblings<-siblings[word(siblings, 1, sep="_")==genus]
}}
while(length(word(siblings,1,sep="_")[!duplicated(word(siblings,1,sep="_"))])==1){ #tip and parent upstream until they are from different genera
sp.tip<-parent
parent<-newtree$edge[newtree$edge[,2]==sp.tip,1]
siblings<- newtree$tip.label[getDescendants(newtree, parent)][!is.na(newtree$tip.label[getDescendants(newtree, parent)])]
if(length(siblings[word(siblings, 1, sep="_")!=genus])==1){
siblings<-siblings[word(siblings, 1, sep="_")==genus]
} #if intruders exist
if(length(siblings[word(siblings, 1, sep="_")!=genus])> 1){
intruders<-siblings[word(siblings, 1, sep="_")!=genus]
intr.desc.tips<-getDescendants(newtree, getMRCA(newtree, intruders))
intr.desc.names<-newtree$tip.label[intr.desc.tips]
intr.desc.names<-intr.desc.names[!is.na(intr.desc.names)]
if(all(word(intr.desc.names, 1, sep="_")!=genus)){
siblings<-siblings[word(siblings, 1, sep="_")==genus] }
}}
descs<- getDescendants(newtree, sp.tip)
desctips<-newtree$tip.label[descs]
desctips<-desctips[!is.na(desctips)]
desctips<-desctips[word(desctips, 1, sep="_")==genus]
genus_tree_list[[i]]<-desctips
}
genus_tree_list<-genus_tree_list[!is.na(genus_tree_list[])]
genus_tree_list<-genus_tree_list[lengths(genus_tree_list[])>1]
forbidden.groups<-c(forbidden.groups, genus_tree_list)}
RANDTIP<- function(tree, species.table, type=c("random", "genus.polytomy", "family.polytomy", "order.polytomy", "class.polytomy"),
aggregate.subspecies=TRUE, insertion=c("random", "middle","long"), prob=TRUE){
start<- Sys.time()
if(type=="random"){
species.table$using.taxa<-NA #New column with the name for the first round
for(i in 1:nrow(species.table)){
if(is.na(species.table$aggregate.subspecies[i])){    #para los NA (en la tabla no hay especificadas excepciones) se aplica lo marado en la funcion
if(aggregate.subspecies==TRUE){species.table$using.taxa[i]<-paste0(word(species.table$taxon[i],1, sep="_"), "_",word(species.table$taxon[i],2, sep="_"))}
else{species.table$using.taxa[i]<-species.table$taxon[i]}
next}
if(species.table$aggregate.subspecies[i]==0){species.table$using.taxa[i]<-species.table$taxon[i] #para los especificados como 0 no se agrupa
next}
if(species.table$aggregate.subspecies[i]==1){species.table$using.taxa[i]<-paste0(word(species.table$taxon[i],1, sep="_"), "_",word(species.table$taxon[i],2, sep="_"))}} # the ones specified with a 1 are clustered
species.table<-species.table[order(species.table$taxon),]
species.table.dupl <- species.table[ duplicated(species.table$using.taxa),]
species.table <-      species.table[!duplicated(species.table$using.taxa),]
newtree<- tree
taxa <- species.table$using.taxa[!duplicated(species.table$using.taxa)]
taxa<- gsub(" ", "_", taxa)
taxa <- taxa[taxa%!in%tree$tip.label]
taxa.genera<- word(taxa, 1, sep="_")[!duplicated(word(taxa, 1, sep="_"))]
taxa.genera<-sample(taxa.genera, length(taxa.genera), replace = F)
}else{
species.table$using.taxa <-species.table$taxon  #In polytomy cases, names are not changed
newtree<- tree
taxa <- species.table$using.taxa[!duplicated(species.table$using.taxa)]
taxa<- gsub(" ", "_", taxa)
taxa <- taxa[taxa%!in%tree$tip.label]
taxa.genera<- word(taxa, 1, sep="_")[!duplicated(word(taxa, 1, sep="_"))]
taxa.genera<-sample(taxa.genera, length(taxa.genera), replace = F)
} #using name preparation
if(type=="genus.polytomy"){
genera<- species.table$genus[!duplicated(species.table$genus)]
for(p in 1:length(genera)){
gen.start<- Sys.time()
genus<- genera[p]
genus.taxa<- species.table$taxon[species.table$genus==genus]
genus.taxa<- genus.taxa[genus.taxa%!in%tree$tip.label]
genus.genera<- species.table$genus[species.table$genus==genus] #this is redundant, but keeps the structure
print(paste0(p, "/", length(genera), " (",round(p/length(genera)*100, 2), " %). ",
"Adding Gen. ", genus, " (",
length(genus.taxa)," tips). "))
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%genus.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(genus.taxa)==0){next}
if(length(union.tips)==0){
family<- species.table$family[species.table$genus==genus][!duplicated(species.table$family[species.table$genus==genus])]
family.taxa<- species.table$taxon[species.table$family==family]
family.taxa<- family.taxa[family.taxa%!in%tree$tip.label]
family.genera<- species.table$genus[species.table$family==family]
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%family.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(family.taxa)==0){next}
if(length(union.tips)==0){
order<-species.table$order[species.table$family==family][!duplicated(species.table$order[species.table$family==family])]
order.taxa<- species.table$taxon[species.table$order==order]
order.taxa<- order.taxa[order.taxa%!in%tree$tip.label]
order.genera<- species.table$genus[species.table$order==order]
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%order.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(order.taxa)==0){next}
if(length(union.tips)==0){
class<- species.table$class[species.table$order==order][!duplicated(species.table$class[species.table$order==order])]
class.taxa<- species.table$taxon[species.table$class==class]
class.taxa<- class.taxa[class.taxa%!in%tree$tip.label]
class.genera<- species.table$genus[species.table$class==class]
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%class.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(class.taxa)==0){next}
if(length(union.tips)==0){message(paste0("ATTENTION: genus ", class.genera, " was not included as no Class coincidences were found"))####JOIN TO UPPER TAXONOMIC LEVEL
next}
newtree<- polytomy_over_node(tree = newtree, species = class.taxa, node=findMRCA(newtree, tips=union.tips), insertion = insertion)####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = order.taxa, node=node, insertion = insertion)####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = family.taxa, node=node, insertion = insertion)####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = genus.taxa, node=node, insertion = insertion)
gen.end<- Sys.time()
print(paste0("\U2713", " (done in ",
round(as.numeric(difftime(gen.end, gen.start, units = "secs")), 2), " sec. out of ",
round(as.numeric(difftime(gen.end, start,     units = "mins")), 2), " mins)"))
}}
if(type=="family.polytomy"){
families<- species.table$family[!duplicated(species.table$family)]
for(p in 1:length(families)){
gen.start<- Sys.time()
family<- families[p]
family.taxa<- species.table$taxon[species.table$family==family]
family.taxa<- family.taxa[family.taxa%!in%tree$tip.label]
family.genera<- species.table$genus[species.table$family==family]
print(paste0(p, "/", length(family.taxa), " (",round(i/length(family.taxa)*100, 2), " %). ",
"Adding Fam. ", family, " (",
length(family.taxa)," tips). "))
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%family.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(family.taxa)==0){next}
if(length(union.tips)==0){
order<-species.table$order[species.table$family==family][!duplicated(species.table$order[species.table$family==family])]
order.taxa<- species.table$taxon[species.table$order==order]
order.taxa<- order.taxa[order.taxa%!in%tree$tip.label]
order.genera<- species.table$genus[species.table$order==order]
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%order.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(order.taxa)==0){next}
if(length(union.tips)==0){
class<- species.table$class[species.table$order==order][!duplicated(species.table$class[species.table$order==order])]
class.taxa<- species.table$taxon[species.table$class==class]
class.taxa<- class.taxa[class.taxa%!in%tree$tip.label]
class.genera<- species.table$genus[species.table$class==class]
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%class.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(class.taxa)==0){next}
if(length(union.tips)==0){message(paste0("ATTENTION: genus ", class.genera, " was not included as no Class coincidences were found"))####JOIN TO UPPER TAXONOMIC LEVEL
next}
newtree<- polytomy_over_node(tree = newtree, species = class.taxa, node=findMRCA(newtree, tips=union.tips), insertion = insertion)####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = order.taxa, node=node, insertion = insertion)####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = family.taxa, node=node, insertion = insertion)
gen.end<- Sys.time()
print(paste0("\U2713", " (done in ",
round(as.numeric(difftime(gen.end, gen.start, units = "secs")), 2), " sec. out of ",
round(as.numeric(difftime(gen.end, start,     units = "mins")), 2), " mins)"))}}
if(type=="order.polytomy"){
orders<- species.table$order[!duplicated(species.table$order)]
for(p in 1:length(orders)){
gen.start<- Sys.time()
order<-orders[p]
order.taxa<- species.table$taxon[species.table$order==order]
order.taxa<- order.taxa[order.taxa%!in%tree$tip.label]
order.genera<- species.table$genus[species.table$order==order]
print(paste0(p, "/", length(order.taxa), " (",round(i/length(order.taxa)*100, 2), " %). ",
"Adding Ord. ", order, " (",
length(order.taxa)," tips). "))
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%order.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(order.taxa)==0){next}
if(length(union.tips)==0){
class<- species.table$class[species.table$order==order][!duplicated(species.table$class[species.table$order==order])]
class.taxa<- species.table$taxon[species.table$class==class]
class.taxa<- class.taxa[class.taxa%!in%tree$tip.label]
class.genera<- species.table$genus[species.table$class==class]
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%class.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(class.taxa)==0){next}
if(length(union.tips)==0){message(paste0("ATTENTION: genus ", class.genera, " was not included as no Class coincidences were found"))####JOIN TO UPPER TAXONOMIC LEVEL
next}
newtree<- polytomy_over_node(tree = newtree, species = class.taxa, node=findMRCA(newtree, tips=union.tips), insertion = insertion)####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = order.taxa, node=node, insertion = insertion)
gen.end<- Sys.time()
print(paste0("\U2713", " (done in ",
round(as.numeric(difftime(gen.end, gen.start, units = "secs")), 2), " sec. out of ",
round(as.numeric(difftime(gen.end, start,     units = "mins")), 2), " mins)"))
}}
if(type=="class.polytomy"){
classes<- species.table$class[!duplicated(species.table$class)]
for(p in 1:length(classes)){
gen.start<- Sys.time()
class<- classes[p]
class.taxa<- species.table$taxon[species.table$class==class]
class.taxa<- class.taxa[class.taxa%!in%tree$tip.label]
class.genera<- species.table$genus[species.table$class==class]
print(paste0(p, "/", length(class.taxa), " (",round(i/length(class.taxa)*100, 2), " %). ",
"Adding Class ", class, " (",
length(class.taxa)," tips). "))
union.tips<-tree$tip.label[word(tree$tip.label, 1, sep="_")%in%class.genera]   #species (tips) within class IN ORIGINAL TREE
if(length(class.taxa)==0){next}
if(length(union.tips)==0){message(paste0("ATTENTION: genus ", class.genera, " was not included as no Class coincidences were found"))####JOIN TO UPPER TAXONOMIC LEVEL
next}
if(length(union.tips)==1){node<- which(newtree$tip.label==union.tips)}else{node<-findMRCA(newtree, tips=union.tips)}
newtree<- polytomy_over_node(tree = newtree, species = class.taxa, node=node, insertion = insertion)
gen.end<- Sys.time()
print(paste0("\U2713", " (done in ",
round(as.numeric(difftime(gen.end, gen.start, units = "secs")), 2), " sec. out of ",
round(as.numeric(difftime(gen.end, start,     units = "mins")), 2), " mins)"))
}}
if(type=="random"){
#forbidden.groups
forb.genera<- species.table[species.table$genus.type=="MONOPHYLETIC"|species.table$genus.type=="PARAPHYLETIC","genus"]
forb.genera<-forb.genera[!duplicated(forb.genera)]
forbidden.groups<- rep(list(NA),length(forb.genera))
treelist<- data.frame("taxon"=tree$tip.label, "genus"=word(tree$tip.label, 1, sep="_"))
if(length(forbidden.groups)>0){
for(l in 1:length(forb.genera)){
forbidden.groups[[l]]<- treelist[treelist$genus==forb.genera[l], "taxon"]
}}
poly.genera<- species.table[species.table$genus.type=="POLYPHYLETIC",]
poly.genera<-poly.genera$genus[!duplicated(poly.genera$genus)]
for(p in 1:length(poly.genera)){
genus<- poly.genera[p]
tree_taxa <- (newtree$tip.label)
genus_tree_taxa <- tree_taxa[word(tree_taxa, 1, sep="_")==genus]
genus_tree_list<- rep(list(NA), times=length(genus_tree_taxa))
for(i in 1:length(genus_tree_taxa)){
sp<-genus_tree_taxa[i]
if(i>1 & sp%in% unlist(genus_tree_list)){next}
sp.tip<- which(newtree$tip.label==sp) #tip value
parent<-newtree$edge[newtree$edge[,2]==sp.tip,1] #direct ancestor
siblings<- newtree$tip.label[getDescendants(newtree, parent)][!is.na(newtree$tip.label[getDescendants(newtree, parent)])] #ancestor's descendants
if(length(siblings[word(siblings, 1, sep="_")!=genus])==1){
siblings<-siblings[word(siblings, 1, sep="_")==genus]
} #if intruders exist
if(length(siblings[word(siblings, 1, sep="_")!=genus])> 1){
intruders<-siblings[word(siblings, 1, sep="_")!=genus]
intr.desc.tips<-getDescendants(newtree, getMRCA(newtree, intruders))
intr.desc.names<-newtree$tip.label[intr.desc.tips]
intr.desc.names<-intr.desc.names[!is.na(intr.desc.names)]
if(all(word(intr.desc.names, 1, sep="_")!=genus)){
siblings<-siblings[word(siblings, 1, sep="_")==genus]
}}
while(length(word(siblings,1,sep="_")[!duplicated(word(siblings,1,sep="_"))])==1){ #tip and parent upstream until they are from different genera
sp.tip<-parent
parent<-newtree$edge[newtree$edge[,2]==sp.tip,1]
siblings<- newtree$tip.label[getDescendants(newtree, parent)][!is.na(newtree$tip.label[getDescendants(newtree, parent)])]
if(length(siblings[word(siblings, 1, sep="_")!=genus])==1){
siblings<-siblings[word(siblings, 1, sep="_")==genus]
} #if intruders exist
if(length(siblings[word(siblings, 1, sep="_")!=genus])> 1){
intruders<-siblings[word(siblings, 1, sep="_")!=genus]
intr.desc.tips<-getDescendants(newtree, getMRCA(newtree, intruders))
intr.desc.names<-newtree$tip.label[intr.desc.tips]
intr.desc.names<-intr.desc.names[!is.na(intr.desc.names)]
if(all(word(intr.desc.names, 1, sep="_")!=genus)){
siblings<-siblings[word(siblings, 1, sep="_")==genus] }
}}
descs<- getDescendants(newtree, sp.tip)
desctips<-newtree$tip.label[descs]
desctips<-desctips[!is.na(desctips)]
desctips<-desctips[word(desctips, 1, sep="_")==genus]
genus_tree_list[[i]]<-desctips
}
genus_tree_list<-genus_tree_list[!is.na(genus_tree_list[])]
genus_tree_list<-genus_tree_list[lengths(genus_tree_list[])>1]
forbidden.groups<-c(forbidden.groups, genus_tree_list)}
for(i in 1: length(taxa.genera)){        #loop 1
gen.start<- Sys.time()
genus<- taxa.genera[i]
genus.type<-species.table$genus.type[species.table$genus==genus][!duplicated(species.table$genus.type[species.table$genus==genus])]
genus.taxa <- taxa[word(taxa, 1, sep="_")==genus] #genus taxa selection
genus.taxa <- sample(genus.taxa, length(genus.taxa), replace = F) #order randomized
grouped.taxa<-species.table$using.taxa[!is.na(species.table$relative.species)]#tips with no "relatives" information selected (they will be bound as monophyletic)
grouped.taxa<-grouped.taxa[grouped.taxa%in%genus.taxa]
genus.taxa<-genus.taxa[genus.taxa%!in%grouped.taxa]
print(paste0(i, "/", length(taxa.genera), " (",round(i/length(taxa.genera)*100, 2), " %). ",
"Adding Gen. ", genus, " (", genus.type,", ",
length(genus.taxa)," tips). "))
if(length(grouped.taxa)>0){    #if "grouped.taxa" exist
for( j in 1:length(grouped.taxa)){
grouping.taxa<- species.table$relative.species[species.table$using.taxa==grouped.taxa[j]]
grouping.taxa<-gsub(" ","",grouping.taxa)
grouping.taxa<- strsplit(grouping.taxa, split = ",")[[1]]
grouping.taxa<-grouping.taxa[grouping.taxa%in%tree$tip.label] #taxa to be grouped hich are in the tree are selected
if(length(grouping.taxa)==1){
newtree<- add_to_singleton(newtree, singleton = grouping.taxa, new.tips = grouped.taxa[j])  #first is added as singleton
} else{
node<-findMRCA(newtree, tips = grouping.taxa)
newtree<- add_into_node(newtree, new.tip = grouped.taxa[j],node = node)} #the rest ar added as monophyletic
rm(j, node, grouping.taxa)}
next}
#Hereon we will work with genus.taxa; i.e., no grouped tips.
if(genus.type=="MONOPHYLETIC"){
for( j in 1:length(genus.taxa)){
newtree<- add_to_monophyletic(newtree, new.tip = genus.taxa[j])#for the given genus, being MP, taxa are added one by one as MP
rm(j)}}
if(genus.type=="PARAPHYLETIC"){
for( j in 1:length(genus.taxa)){
newtree<- add_to_paraphyletic(newtree, new.tip = genus.taxa[j])#for the given genus, being PaP, taxa are added one by one as PaP
rm(j)}}
if(genus.type=="POLYPHYLETIC"){
newtree<- add_to_polyphyletic(newtree, species  = genus.taxa)#for the given genus, being PoP, taxa are added one by one as PoP
}
if(genus.type=="SINGLETON GENUS"){   #for the given genus, being singleton, all tips are added in one step
newtree<- add_to_singleton(newtree, singleton = tree$tip.label[word(tree$tip.label,1,sep="_")== genus], new.tips = genus.taxa)
}
if(genus.type=="NOT INCLUDED"){
genus.synonyms<- species.table$synonim.genus[species.table$genus==genus&!is.na(species.table$synonim.genus)]#looking for synonim information...
genus.siblings<- species.table$sibling.genus[species.table$genus==genus&!is.na(species.table$sibling.genus)]#... or sibling information
genus.synonyms.tips<-species.table$using.taxa[species.table$genus==genus&!is.na(species.table$synonim.genus)]
genus.siblings.tips<-species.table$using.taxa[species.table$genus==genus&!is.na(species.table$sibling.genus)]
genus.taxa.NO.except<-genus.taxa[genus.taxa%!in%c(genus.synonyms.tips,genus.siblings.tips)]#taxa without exceptions
if(length(genus.synonyms)>0){#for genera with synonym exceptions
for(i in 1:length(genus.synonyms.tips)){
genus.synonyms.tips[i]<-paste0(genus.synonyms[i], "_",genus.synonyms.tips[i]) #synonym genus pasted to the begginig of the name; must be in the tree
new.genus<- word(genus.synonyms.tips[i], 1, sep="_")
new.genus.type<-species.table$genus.type[species.table$genus==new.genus][!duplicated(species.table$genus.type[species.table$genus==new.genus])]
if(new.genus.type=="MONOPHYLETIC"){
newtree<- add_to_monophyletic(newtree, new.tip = genus.synonyms.tips[i])}
if(new.genus.type=="PARAPHYLETIC"){
newtree<- add_to_paraphyletic(newtree, new.tip = genus.synonyms.tips[i])}
if(new.genus.type=="POLYPHYLETIC"){
newtree<- add_to_polyphyletic(newtree, species = genus.synonyms.tips[i])}
if(new.genus.type=="SINGLETON GENUS"){
newtree<- add_to_singleton(newtree,
singleton = newtree$tip.label[word(newtree$tip.label,1,sep="_")== new.genus],
new.tips = genus.synonyms.tips[i])}
newtree$tip.label<-gsub(pattern = genus.synonyms.tips[i],
replacement = species.table$using.taxa[species.table$genus==genus&!is.na(species.table$synonim.genus)][i],
x =newtree$tip.label )
}}
if(length(genus.siblings)>0){#for genera with sibling exceptions
if(length(genus.siblings[!duplicated(genus.siblings)])>1){stop(paste0("Multiple genus siblings for genus ",genus))}
new.genus<- genus.siblings[!duplicated(genus.siblings)]
genus.siblings.tips<-sample(genus.siblings.tips, length(genus.siblings.tips), replace = F)
adding.node<- findMRCA(newtree, tips = newtree$tip.label[word(newtree$tip.label, 1, sep="_")==new.genus])
newtree<-add_over_node(newtree, new.tip = genus.siblings.tips[1], node=adding.node)#it is added over the sibling genus MCRA
newtree<-add_to_singleton(newtree, singleton = genus.siblings.tips[1],new.tips =  genus.siblings.tips[2:length(genus.siblings.tips)])#te rest are added to singleton
}
if(length(genus.taxa.NO.except)>0){#for those with no exceptions, they will be added randomly within family, order or class
fam<-species.table$family[species.table$using.taxa%in%genus.taxa.NO.except][!duplicated(species.table$family[species.table$using.taxa%in%genus.taxa.NO.except])]
genera<- species.table$genus[species.table$family==fam]
family.taxa<- newtree$tip.label[word(newtree$tip.label,1, sep="_")%in%genera]
if(length(family.taxa)>0){
newtree<- add_into_node_exceptions(tree=newtree, node=findMRCA(tree = newtree,tips = family.taxa),new.tip = genus.taxa.NO.except[1], exception.list = forbidden.groups)
if(length(genus.taxa.NO.except)>1){newtree<- add_to_singleton(tree=newtree, singleton = genus.taxa.NO.except[1],new.tips = genus.taxa.NO.except[2:length(genus.taxa.NO.except)])}
}else{
ord<-species.table$order[species.table$using.taxa%in%genus.taxa.NO.except][!duplicated(species.table$family[species.table$using.taxa%in%genus.taxa.NO.except])]
genera<- species.table$genus[species.table$order==ord]
order.taxa<- newtree$tip.label[word(newtree$tip.label,1, sep="_")%in%genera]
if(length(order.taxa)>0){
newtree<- add_into_node_exceptions(tree=newtree, node=findMRCA(tree = newtree,tips = order.taxa),new.tip = genus.taxa.NO.except[1], exception.list = forbidden.groups)
if(length(genus.taxa.NO.except)>1){newtree<- add_to_singleton(tree=newtree, singleton = genus.taxa.NO.except[1],new.tips = genus.taxa.NO.except[2:length(genus.taxa.NO.except)])}
}else{
cla<-species.table$class[species.table$using.taxa%in%genus.taxa.NO.except][!duplicated(species.table$family[species.table$using.taxa%in%genus.taxa.NO.except])]
genera<- species.table$genus[species.table$class==cla]
class.taxa<- newtree$tip.label[word(newtree$tip.label,1, sep="_")%in%genera]
if(length(class.taxa)>0){
newtree<- add_into_node_exceptions(tree=newtree, node=findMRCA(tree = newtree,tips = class.taxa),new.tip = genus.taxa.NO.except[1], exception.list = forbidden.groups)
if(length(genus.taxa.NO.except)>1){newtree<- add_to_singleton(tree=newtree, singleton = genus.taxa.NO.except[1],new.tips = genus.taxa.NO.except[2:length(genus.taxa.NO.except)])}
}else{
stop(paste0("Genus ", genus, " has no family, order or class relatives"))}}}
}
}
gen.end<- Sys.time()
print(paste0("\U2713", "( done in ",
round(as.numeric(difftime(gen.end, gen.start, units = "secs")), 2), " sec. out of ",
round(as.numeric(difftime(gen.end, start,     units = "mins")), 2), " mins)"))
}
# phase 2. subspecies
if(nrow(species.table.dupl)>0){ #species grouped
start<- Sys.time()
rep.taxa <-species.table.dupl$taxon #species are found
rep.taxa.species<- species.table.dupl$using.taxa[!duplicated(species.table.dupl$using.taxa)]#subspecies' species
for (r in 1:length(rep.taxa.species)){
sp.start<- Sys.time()
ssps <- rep.taxa[paste0(word(rep.taxa, 1, sep="_"),"_",word(rep.taxa, 2, sep="_"))==rep.taxa.species[r]] #subspecies within species are selected
ssps <- sample(ssps, length(ssps), replace = F) #order randomized
sp.to.add<- newtree$tip.label[paste0(word(newtree$tip.label,1, sep="_"), "_", word(newtree$tip.label,2, sep="_"))== rep.taxa.species[r] ]
if(length(sp.to.add)>1){sp.to.add<-sp.to.add[sp.to.add==rep.taxa.species[r]]}
newtree<- add_to_singleton(newtree, singleton = sp.to.add, new.tips = ssps) #subspecies are added to their sister as singleton
sp.end<- Sys.time()
print(paste0(r, "/", length(rep.taxa.species), " (", round(r/length(rep.taxa.species)*100, 2), " %): ",  rep.taxa.species[r]," (",
round(as.numeric(difftime(sp.end, sp.start, units = "secs")), 2), " sec. out of ",
round(as.numeric(difftime(sp.end, start,     units = "mins")), 2), " mins)"))
}
}
for(n in 1:nrow(species.table)){  #original names are returned
if(species.table$using.taxa[n]== species.table$taxon[n]){next}
if(species.table$using.taxa[n]%!in% newtree$tip.label){next}
if(species.table$using.taxa[n]%in% newtree$tip.label){
newtree$tip.label[newtree$tip.label==species.table$using.taxa[n]]<-species.table$taxon[n]
print(paste0("name correction: ", n, "/", nrow(species.table), " (", round(n/nrow(species.table)*100, 2), " %)"))
}}
}
complete_taxa_list<-c(species.table$taxon, species.table.dupl$taxon)
complete_taxa_list_in_tree<-complete_taxa_list[complete_taxa_list%in%newtree$tip.label]
if(length(complete_taxa_list[complete_taxa_list%!in%complete_taxa_list_in_tree])>1){message(paste0("The following taxa were not included in the tree: ", (complete_taxa_list[complete_taxa_list%!in%complete_taxa_list_in_tree])))}
newtree<-keep.tip(newtree, complete_taxa_list_in_tree)
return(newtree)
}
#PREPARATION####
setwd("E:/UNI/4. DOCTORADO/OTROS/Comunidades Halófitas/phylogenies")
rm(list = setdiff(ls(), lsf.str()))#eliminar todo menos funciones
load("E:/UNI/4. DOCTORADO/OTROS/Comunidades Halófitas/phylogenies/GBOTB.extended.rda")
listado_especies<- read.xlsx("E:/UNI/4. DOCTORADO/OTROS/Comunidades Halófitas/phylogenies/species_TFM_Ana.xlsx")
#taxonomy.Ana<- phylo.taxonomy(listado_especies$match.name)
#write.xlsx(taxonomy.Ana, "randtip.taxonomy_Ana.xlsx")
taxonomy.Ana<-read.xlsx("E:/UNI/4. DOCTORADO/OTROS/Comunidades Halófitas/phylogenies/randtip.taxonomy_Ana.xlsx")
included<-GBOTB.extended$tip.label[word(GBOTB.extended$tip.label, 1, sep="_")%in%taxonomy.Ana$Genus]
GBOTB.pruned<-drop.tip(GBOTB.extended, GBOTB.extended$tip.label[-match(included, GBOTB.extended$tip.label  )])
rm(included, GBOTB.extended)
#complete.table<- phylo.table(species = listado_especies$match.name, tree = GBOTB.pruned, taxonomy = taxonomy.Ana)
#write.xlsx(complete.table, "complete.table_Ana.xlsx")
complete.table<-read.xlsx("E:/UNI/4. DOCTORADO/OTROS/Comunidades Halófitas/phylogenies/complete.table_Ana.xlsx")
rand.tree<-RANDTIP(tree = GBOTB.pruned, species.table = complete.table, type = "random",
aggregate.subspecies = TRUE, insertion = "random", prob = TRUE)
rtree(14)
tree<-rtree(15)
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = F))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = F))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = F))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = F))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = T))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = T))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = T))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = T))
plot(tree)
tree<-force.ultrametric(rtree(15, equiprob = T))
plot(tree)
tree$tip.label<- c("1.1", "1.2", "X.1", "2.1" , "2.2", "X.2", "X.3" "X.4", "X.5",
"3.1","3.2","3.3","3.4","3.5")
tree$tip.label<- c("1.1", "1.2", "X.1", "2.1" , "2.2", "X.2", "X.3" "X.4", "X.5","3.1","3.2","3.3","3.4","3.5")
tree$tip.label<- c("1.1", "1.2", "X.1", "2.1" , "2.2", "X.2", "X.3" "X.4", "X.5","3.1","3.2","3.3","3.4")
tree$tip.label<- c("1.1", "1.2", "X.1", "2.1" , "2.2", "X.2", "X.3" "X.4", "X.5","3.1","3.2","3.3","3.4", "3.5", "3.6")
tree$tip.label<- c("1.1", "1.2", "X.1", "2.1" , "2.2", "X.2", "X.3", "X.4", "X.5","3.1","3.2","3.3","3.4", "3.5", "3.6")
plot(tree)
tree2<-add_to_singleton(tree, singleton = "X.1", new.tips = "X.2")
plot(tree2)
tree3<-add_to_singleton(tree2, singleton = "X.1", new.tips = "Z.1")
plot(tree3)
