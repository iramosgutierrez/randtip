EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]) -> edges[i,5]
}
}
SS <- sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
N1<-findMRCA(tree, tips=as.character(tips1), "node")
if(duplicated(as.character(tips2))[2]==TRUE) {which(tree$tip.label==as.character(tips2)[1])->N2} else
{N2<-findMRCA(tree, tips=as.character(tips2), "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
if(length(Lengths)==1){Lengths->to_index} else
{sample(Lengths,1,replace=FALSE,DF[Lengths,3])->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
} else {
SS <- sample(1:dim(edges)[1],1)
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
N1<-findMRCA(tree, tips=as.character(tips1), "node")
if(duplicated(as.character(tips2))[2]==TRUE) {which(tree$tip.label==as.character(tips2)[1])->N2} else
{N2<-findMRCA(tree, tips=as.character(tips2), "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
if(length(Lengths)==1){Lengths->to_index} else
{sample(Lengths,1)->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
}
dim(edges)
1:dim(edges)[1]
edges
edges[i,1:2]
edges[i,1:2]
for(i in 1:dim(edges)[1]) {
tips1 = edges[i,1:2]
tips2 = edges[i,3:4]
N1<-findMRCA(tree, tips=as.character(tips1), "node")
if(duplicated(as.character(tips2))[2]==TRUE) {which(tree$tip.label==as.character(tips2)[1])->N2} else
{N2<-findMRCA(tree, tips=as.character(tips2), "node")}
if(tree$edge[which.edge(tree, N2),1]==N1) {DF[which.edge(tree, N2),3] -> edges[i,5]} else {
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]) -> edges[i,5]
}
}
i
tips1 = edges[i,1:2]
tips2 = edges[i,3:4]
N1<-findMRCA(tree, tips=as.character(tips1), "node")
as.character(tips1)
tips1
as.character(tips1)
as.character(tips1[1,])
tips1
as.character(edges[i,1:2])
as.character(edges[1,1])
as.character(edges[1,1:2])
tips1.char<- c(edges[i,1], edges[i,2])
tips1.char
tips1.char<- c(as.character(edges[i,1]), as.character(edges[i,2]))
Y-%m-%d
tips1.char
N1<-findMRCA(tree, tips=tips1.char, "node")
N1
duplicated(tips2.char)
tips2.char
tips2.char<- c(as.character(edges[i,3]), as.character(edges[i,4]))
duplicated(tips2.char)[2]
tips2.char
tips2
which(tree$tip.label==tips2.char[1])
N1
tree$edge[which.edge(tree, N2),1]
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else {N2<-findMRCA(tree, tips=tips2.char, "node")}
tree$edge[which.edge(tree, N2),1]
tree$edge
which.edge(tree, N2)
DF[which.edge(tree, N2),3]
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
Parent
Child
rbind(c(Parent,Child))
EDGES <- rbind(c(Parent,Child))
{
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Parent
N1
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3])
edges[i,5]
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]) -> edges[i,5]
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
edges
for(i in 1:dim(edges)[1]) {
tips1 = edges[i,1:2]
tips2 = edges[i,3:4]
tips1.char<- c(as.character(edges[i,1]), as.character(edges[i,2]))
tips2.char<- c(as.character(edges[i,3]), as.character(edges[i,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else {N2<-findMRCA(tree, tips=tips2.char, "node")}
if(tree$edge[which.edge(tree, N2),1]==N1) {DF[which.edge(tree, N2),3] -> edges[i,5]} else {
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]) -> edges[i,5]
}
}
edges
DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]
DF
SS <- sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
SS
EDGES[,1]
tips1
EDGES
edges
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
tips1
tips2
N1<-findMRCA(tree, tips=as.character(tips1), "node")
tips1.char<- c(as.character(edges[SS,1]), as.character(edges[SS,2]))
tips2.char<- c(as.character(edges[SS,3]), as.character(edges[SS,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
N1
tips2.char
duplicated(tips2.char)[2]
which(tree$tip.label==tips2.char[1])
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else{N2<-findMRCA(tree, tips=tips2.char, "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
EDGES
Lengths
EDGES
Parent
N1
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
Lengths
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
Lengths
EDGES
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
Lengths
length(EDGES[,1])
vector(mode="numeric",length=length(EDGES[,1]))
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
Lengths
if(length(Lengths)==1){Lengths->to_index} else
{sample(Lengths,1)->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
stick.to.branch <- function(tree,edges,new.tip=new.tip,prob=TRUE){
DF <- data.frame(tree$edge,tree$edge.length)
if(prob == TRUE) {
for(i in 1:dim(edges)[1]) {
tips1 = edges[i,1:2]
tips2 = edges[i,3:4]
tips1.char<- c(as.character(edges[i,1]), as.character(edges[i,2]))
tips2.char<- c(as.character(edges[i,3]), as.character(edges[i,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else {N2<-findMRCA(tree, tips=tips2.char, "node")}
if(tree$edge[which.edge(tree, N2),1]==N1) {DF[which.edge(tree, N2),3] -> edges[i,5]} else {
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]) -> edges[i,5]
}
}
SS <- sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
tips1.char<- c(as.character(edges[SS,1]), as.character(edges[SS,2]))
tips2.char<- c(as.character(edges[SS,3]), as.character(edges[SS,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else{N2<-findMRCA(tree, tips=tips2.char, "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
if(length(Lengths)==1){Lengths->to_index} else {sample(Lengths,1,replace=FALSE,DF[Lengths,3])->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
} else {
SS <- sample(1:dim(edges)[1],1)
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
tips1.char<- c(as.character(edges[SS,1]), as.character(edges[SS,2]))
tips2.char<- c(as.character(edges[SS,3]), as.character(edges[SS,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else{N2<-findMRCA(tree, tips=tips2.char, "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
if(length(Lengths)==1){Lengths->to_index} else {sample(Lengths,1)->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
}
return(tree)
}
load("H:/MIERDA BORRABLE/Tree_example.RData")
plot(Tree)
nodelabels(cex=0.75)
edges1<- read.table("H:/MIERDA BORRABLE/Example1.txt", header = F, sep="\t")
View(edges1)
Tree2 <- stick.to.branch(Tree,Tabla,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
stick.to.branch <- function(tree,edges,new.tip=new.tip,prob=TRUE){
DF <- data.frame(tree$edge,tree$edge.length)
if(prob == TRUE) {
for(i in 1:dim(edges)[1]) {
tips1 = edges[i,1:2]
tips2 = edges[i,3:4]
tips1.char<- c(as.character(edges[i,1]), as.character(edges[i,2]))
tips2.char<- c(as.character(edges[i,3]), as.character(edges[i,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else {N2<-findMRCA(tree, tips=tips2.char, "node")}
if(tree$edge[which.edge(tree, N2),1]==N1) {DF[which.edge(tree, N2),3] -> edges[i,5]} else {
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
sum(DF[DF[,1]%in%EDGES[,1]&DF[,2]%in%EDGES[,2],3]) -> edges[i,5]
}
}
SS <- sample(1:dim(edges)[1],1,replace=FALSE,edges[,5])
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
tips1.char<- c(as.character(edges[SS,1]), as.character(edges[SS,2]))
tips2.char<- c(as.character(edges[SS,3]), as.character(edges[SS,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else{N2<-findMRCA(tree, tips=tips2.char, "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
if(length(Lengths)==1){Lengths->to_index} else {sample(Lengths,1,replace=FALSE,DF[Lengths,3])->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
} else {
SS <- sample(1:dim(edges)[1],1)
tips1 = edges[SS,1:2]
tips2 = edges[SS,3:4]
tips1.char<- c(as.character(edges[SS,1]), as.character(edges[SS,2]))
tips2.char<- c(as.character(edges[SS,3]), as.character(edges[SS,4]))
N1<-findMRCA(tree, tips=tips1.char, "node")
if(duplicated(tips2.char)[2]==TRUE) {N2<-which(tree$tip.label==tips2.char[1])} else{N2<-findMRCA(tree, tips=tips2.char, "node")}
EDGES <- c(NA,NA)
Child=N2
getParent(tree,Child) -> Parent
EDGES <- rbind(c(Parent,Child))
while(Parent!=N1) {
getDescendants(tree, Parent, curr=NULL)->Desc_Par
Desc_Par<-c(Desc_Par[Desc_Par%in%getDescendants(tree, Child, curr=NULL)==FALSE & Desc_Par!=Child],Parent)
EDGES<-rbind(EDGES,tree$edge[tree$edge[,1]%in%Desc_Par & tree$edge[,2]!=Child,])
Child<-Parent
Parent<-getParent(tree,Parent)
EDGES <- rbind(EDGES,c(Parent,Child))
}
Lengths <- vector(mode="numeric",length=length(EDGES[,1]))
for(j in 1:dim(EDGES)[1]){
which.edge(tree, EDGES[j,2]) -> Lengths[j]
}
if(length(Lengths)==1){Lengths->to_index} else {sample(Lengths,1)->to_index}
WHERE = tree$edge[to_index,2]
tree$edge.length[to_index]->LLL
MIN=0
MAX=LLL
runif(1,MIN,MAX)->POS
while(POS==MIN | POS==MAX){
runif(1,MIN,MAX)->POS
}
bind.tip(tree, new.tip, edge.length=NULL, where=WHERE, position=POS)->tree
}
return(tree)
}
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
Tree2 <- stick.to.branch(Tree,edges = edges1,new.tip="New species",prob=TRUE) # See Figure 1 attached to visualize the candidate branches
par(mfrow=c(1,2))
plot(Tree)
plot(Tree2)
plot(Tree)
nodelabels(cex=0.75)
plot(Tree2)
edges2<- read.table("H:/MIERDA BORRABLE/Example2.txt", header = F, sep="\t")
edges2
sample()
